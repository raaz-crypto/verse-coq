#+TITLE: Explicit formula for curve25519 computation.

The curve C : y¬≤ = x¬≥ + A x¬≤ + x over the finite field ùîΩ‚Çö. In our
case the prime p = 2¬≤‚Åµ‚Åµ - 19 and the constant A is 486662.


* X25519 Diffie-Hellman.


The curve is such that if P = (x,y) ‚àà E(C) then -P = (x, -y) ‚àà
E(C). Since we use only the x-coordinate, we do not need to
distinguish the points P and -P.


Therefore the rule is given points P and Q find and R such that R ‚àà
Line(P,Q) ‚à© E(C). Let y = m x + c be the line through P and Q. We have
m = (y‚ÇÅ - y‚ÇÇ)/(x‚ÇÅ - x‚ÇÇ). Substituting in C and realising that
x(P+Q) + x(P) + x(Q) should be the negative of the x¬≤-coefficient we have.


- x(P+Q) = m¬≤ - A - x(P) - x(Q).

For doubling the associated formula is

- x(2P) = m¬≤ - A - 2 x(P)  where m is now the slope of the tangent = (3x¬≤ + 2A x + 1)/(2 y).

** Montgomery ladder.

Given a base point B on the curve and a number n = a‚ÇÄ + a‚ÇÅ 2 + ... +
a‚Çñ 2·µè we want to compute the n B; rather we want to compute the
x-coordinate of n B. We compute a sequence of point pairs.

P·µ¢ , Q·µ¢ such that P·µ¢ = n·µ¢ B and Q·µ¢ = (n·µ¢ + 1) B. The n·µ¢'s are choosen
with the property that n·µ¢ = ‚åà n/2·µè‚Åª‚Å± ‚åâ = a‚Çñ‚Çã·µ¢ + 2 * a‚Çñ‚Çã·µ¢‚Çä‚ÇÅ + ... + 2‚Å±
a‚Çñ.  To start the process, we can set P‚Çã‚ÇÅ = n‚Çã‚ÇÅ B = 0 B = ‚àû ; Q‚Çã‚ÇÅ = B.
When i = k we have the desired result.

Consider the stage (i - 1) and let P = P·µ¢‚Çã‚ÇÅ and Q = Q·µ¢‚Çã‚ÇÅ. We have the following cases.

- a‚Çñ‚Çã·µ¢ = 0 ::

  We have n·µ¢ = 2  and hence P·µ¢ = 2P and Q·µ¢ = P + Q.

- a‚Çñ‚Çã·µ¢ = 1 :: Then P·µ¢ = P + Q and Q·µ¢ = 2Q.


Define a /Montgomery step/ as computing (2 P, P+Q) from (P, Q).  Notice
that depending on whether the bit a‚Çñ‚Çã·µ¢ we might have to compute either
(2P , P + Q) or (2Q, P+Q). In the most complete sense, Montgomery step
is the following.


- Montegomery step :: Given (P,Q) and the point B such that Q - P = B,
  compute (2 P, P+Q). We will denote this by the function Montgomery :
  E * E -> E * E.

*** Swapping and climbing the ladder.

In our case, we need all the P·µ¢'s and Q·µ¢'s and it is sufficient to
iterate the Montegomery step with appropriate swaps. Notice that
(P·µ¢,Q·µ¢) = swap a‚Çñ‚Çã·µ¢ . Montgomery . swap a‚Çñ‚Çã·µ¢ (P,Q)

swap b (P,Q) = if b = 0 then (P,Q) else (Q,P).


Notice that we have B = Q - P. If we swap we need the point -B = P -
Q, which, fortunately has the same x-coordinate of B which is all what
we care about during the computation.


** In projective coordinates.

The main idea is to rewrite the formulae for x-cordinates purely in
terms of x-coordinates and then homogenize using x = X/Z.

*** Doubling the point P.

x(2P) = (3x¬≤ + 2A x + 1)¬≤/4y¬≤ - A - 2 x(P).
      = function in x alone  (by replacing y¬≤ with x¬≥ + A x¬≤ + x)
      =

- X(2P) = (X¬≤ - Z¬≤)¬≤
- Z(2P) = 4XZ(X¬≤ + A X Z + Z¬≤)

*** Point addition P + Q

We assume that we have the points P and Q with coordinates [x‚ÇÅ,z‚ÇÅ] and
[x‚ÇÇ,z‚ÇÇ] respectively and we know the x-coordinate of x‚ÇÄ of the point B
= Q - P.

The formula for point addition is given by.

x = [(x‚ÇÅ + x‚ÇÇ)(1 + x‚ÇÅ x‚ÇÇ) + 2 A x‚ÇÅ x‚ÇÇ - 2 y‚ÇÅ y‚ÇÇ]/ (x‚ÇÇ - x‚ÇÅ)¬≤


Using this we get

x(B) = [(x‚ÇÅ + x‚ÇÇ)(1 + x‚ÇÅ x‚ÇÇ) + 2 A x‚ÇÅ x‚ÇÇ + 2 y‚ÇÅ y‚ÇÇ]/ (x‚ÇÇ - x‚ÇÅ)¬≤


Which gives 2y‚ÇÅy‚ÇÇ = x(B) (x‚ÇÇ - x‚ÇÅ)¬≤ - (x‚ÇÅ + x‚ÇÇ)(1 + x‚ÇÅ x‚ÇÇ) - 2 A x‚ÇÅ
x‚ÇÇ. We then substitute 2y‚ÇÅy‚ÇÇ to get a x-only formulae which we can
homogenize. This results in the following projective equation for the
X and Z coordinates of P + Q.



- X  =  (X‚ÇÅ X‚ÇÇ  - Z‚ÇÅ Z‚ÇÇ)¬≤

- Z  =  X(B) (X‚ÇÅ Z‚ÇÇ  - X‚ÇÇ Z‚ÇÅ )¬≤


** Optimised formula

We need to compute the following homogeneous coordinates at the end of
each montgomery step.


- X‚ÇÇ·µ¢    = (X·µ¢¬≤ - Z·µ¢¬≤)¬≤
- Z‚ÇÇ·µ¢    = 4X·µ¢Z·µ¢(X·µ¢¬≤ + A X·µ¢ Z·µ¢ + Z·µ¢¬≤)
- X‚ÇÇ·µ¢‚Çä‚ÇÅ  =  (X·µ¢ X·µ¢‚Çä‚ÇÅ  - Z·µ¢ Z·µ¢‚Çä‚ÇÅ)¬≤
- Z‚ÇÇ·µ¢‚Çä‚ÇÅ  =  X(B) (X·µ¢ Z·µ¢‚Çä‚ÇÅ  - X·µ¢‚Çä‚ÇÅ Z·µ¢ )¬≤

  Based on https://martin.kleppmann.com/papers/curve25519.pdf (which
  it self is an explanation of tweet NaCl implementation) we give the
  following optimised implementation as a table. The actual code is
  different in that we disallow assignments of the kind a *= b.

We start with t‚ÇÄ, t‚ÇÅ, t‚ÇÇ, t‚ÇÉ having the value X·µ¢ = a, X·µ¢‚Çä‚ÇÅ = b, Z·µ¢ = c
and Z·µ¢‚Çä‚ÇÅ = d respectively.

To see the correctness of the algorithm, look on to the SSA form of
the program. The Value column gives the value of the appropriate SSA
variable in terms of the original value a,b,c, and d.

Based on the SSA program, we compute the lifetime. An SSA variable v·µ¢
has a lifetime of ~l~ if the last SSA assignment where it is used is
~v‚Çó~. An infinity (‚àû) in the life time column indicate that the value
is required in the next Montgomery step.

Based on the lifetimes, we compute a register allocation into
registers 6 registers t‚ÇÄ...t‚ÇÖ. The actual series of assignment is
given in the right most column. The property that we should ensure is
that if t is the register allocated for an SSA variable v·µ¢ then it
should not be reallocated before the life time of v·µ¢ expires.


| Lifetime | SSA              | Value                         | Register allocation | Assignment       |
|----------+------------------+-------------------------------+---------------------+------------------|
|        2 | t‚ÇÄ = a           | a                             | t‚ÇÄ                  | NOP              |
|        4 | t‚ÇÅ = b           | b                             | t‚ÇÅ                  | NOP              |
|        2 | t‚ÇÇ = c           | c                             | t‚ÇÇ                  | NOP              |
|        4 | t‚ÇÉ = d           | d                             | t‚ÇÉ                  | NOP              |
|----------+------------------+-------------------------------+---------------------+------------------|
|        6 | v‚ÇÅ = t‚ÇÄ + t‚ÇÇ     | a + c                         | t‚ÇÑ                  | t‚ÇÑ  = t‚ÇÄ + t‚ÇÇ    |
|        8 | v‚ÇÇ = t‚ÇÄ - t‚ÇÇ     | a - c                         | t‚ÇÄ                  | t‚ÇÄ -= t‚ÇÇ         |
|        7 | v‚ÇÉ = t‚ÇÅ + t‚ÇÉ     | b + d                         | t‚ÇÖ                  | t‚ÇÖ = t‚ÇÅ + t‚ÇÉ     |
|        5 | v‚ÇÑ = t‚ÇÅ - t‚ÇÉ     | b - d                         | t‚ÇÅ                  | t‚ÇÅ -= t‚ÇÉ         |
|----------+------------------+-------------------------------+---------------------+------------------|
|       10 | v‚ÇÖ = v‚ÇÅ * v‚ÇÑ     | (a + c)(b - d)                | t‚ÇÇ                  | t‚ÇÇ = t‚ÇÑ * t‚ÇÅ     |
|       15 | v‚ÇÜ = v‚ÇÅ ¬≤        | (a + c)¬≤                      | t‚ÇÅ                  | t‚ÇÅ = t‚ÇÑ¬≤         |
|       10 | v‚Çá = v‚ÇÇ * v‚ÇÉ     | (a - c)(b + d)                | t‚ÇÉ                  | t‚ÇÉ = t‚ÇÄ t‚ÇÖ       |
|       13 | v‚Çà = v‚ÇÇ ¬≤        | (a - c)¬≤                      | t‚ÇÑ                  | t‚ÇÑ = t‚ÇÄ¬≤         |
|----------+------------------+-------------------------------+---------------------+------------------|
|       18 | v‚Çâ  = v‚ÇÖ + v‚Çá    | 2(ab - cd)                    | t‚ÇÖ                  | t‚ÇÖ = t‚ÇÇ + t‚ÇÉ     |
|       11 | v‚ÇÅ‚ÇÄ = v‚ÇÖ - v‚Çá    | 2(ad - bc)                    | t‚ÇÇ                  | t‚ÇÇ -= t‚ÇÉ         |
|       17 | v‚ÇÅ‚ÇÅ = v‚ÇÅ‚ÇÄ ¬≤      | 4(ad - bc)¬≤                   | t‚ÇÄ                  | t‚ÇÄ  = t‚ÇÇ¬≤        |
|       ‚àû  | v‚ÇÅ‚ÇÇ = v‚ÇÜ * v‚Çà    | (a¬≤ - c¬≤)¬≤           = X‚ÇÇ·µ¢    | t‚ÇÇ                  | t‚ÇÇ = t‚ÇÅ * t‚ÇÑ     |
|       16 | v‚ÇÅ‚ÇÉ = v‚ÇÜ - v‚Çà    | 4ac                           | t‚ÇÉ                  | t‚ÇÉ = t‚ÇÅ - t‚ÇÑ     |
|       15 | v‚ÇÅ‚ÇÑ = 121665 v‚ÇÅ‚ÇÉ | 486660 ac = (A - 2)a c        | t‚ÇÑ                  | t‚ÇÑ = 121665 * t‚ÇÉ |
|       16 | v‚ÇÅ‚ÇÖ = v‚ÇÜ + v‚ÇÅ‚ÇÑ   | a¬≤ + A ac + c¬≤                | t‚ÇÅ                  | t‚ÇÅ += t‚ÇÑ         |
|       ‚àû  | v‚ÇÅ‚ÇÜ = v‚ÇÅ‚ÇÉ * v‚ÇÅ‚ÇÖ  | 4ac (a¬≤ + A ac + c¬≤) = Z‚ÇÇ·µ¢    | t‚ÇÑ                  | t‚ÇÑ = t‚ÇÉ * t‚ÇÅ     |
|       ‚àû  | v‚ÇÅ‚Çá = v‚ÇÅ‚ÇÅ X      | 4 X(ad - b c)¬≤       = 4Z‚ÇÇ·µ¢‚Çä‚ÇÅ | t‚ÇÅ                  | t‚ÇÅ = t‚ÇÄ * X      |
|       ‚àû  | v‚ÇÅ‚Çà = v‚Çâ ¬≤       | 4 (ab - cd)¬≤         = 4X‚ÇÇ·µ¢‚Çä‚ÇÅ | t‚ÇÉ                  | t‚ÇÉ = t‚ÇÖ¬≤         |
|----------+------------------+-------------------------------+---------------------+------------------|

At the end of the computation we should have [X‚ÇÇ·µ¢ : Z‚ÇÇ·µ¢] and [X‚ÇÇ·µ¢‚Çä‚ÇÅ :
Z‚ÇÇ·µ¢‚Çä‚ÇÅ] which are available in the registers [t‚ÇÇ : t‚ÇÑ] and [t‚ÇÉ : t‚ÇÅ]
respectively. Therefore the Montgomery step should be repeated with
t‚ÇÇ, t‚ÇÉ, t‚ÇÑ and t‚ÇÅ.


The monocypher library which inturn borrows from the supercop
implementation has the following operations.

#+begin_src C
  // Montgomery ladder step: replaces (P2, P3) by (P2*2, P2+P3)
  // with differential addition
  fe_sub(t0, x3, z3);  fe_sub(t1, x2, z2);    fe_add(x2, x2, z2);
  fe_add(z2, x3, z3);  fe_mul(z3, t0, x2);    fe_mul(z2, z2, t1);
  fe_sq (t0, t1    );  fe_sq (t1, x2    );    fe_add(x3, z3, z2);
  fe_sub(z2, z3, z2);  fe_mul(x2, t1, t0);    fe_sub(t1, t1, t0);
  fe_sq (z2, z2    );  fe_mul121666(z3, t1);  fe_sq (x3, x3    );
  fe_add(t0, t0, z3);  fe_mul(z3, x1, z2);    fe_mul(z2, t1, t0);
#+end_src



** Our formula

We make use of a modified version of the tweet NaCl forumla assuming a
64-bit word size. We have the implementation of the following basic
instruction.

- A := B + C
- A += B
- A = B - C
- A -= B
- A := B * C
- A := B¬≤

Notice that we do not have instructions like A *= B or A := A¬≤.  So
our instructions should be careful to avoid such stuff.

Given below is a SSA program that works through the instructions.


| Value                         | SSA | SSA program      | Need   | x‚ÇÇ  | x‚ÇÉ  | z‚ÇÇ  | z‚ÇÉ  | t‚ÇÄ  | t‚ÇÅ  | Inst             | Size     | A Size  |
|-------------------------------+-----+------------------+--------+-----+-----+-----+-----+-----+-----+------------------+----------+---------|
| a                             |   0 | v‚ÇÄ = a           | 5  (A) | v‚ÇÄ  |     |     |     |     |     |                  | 61       | 40      |
| b                             |   1 | v‚ÇÅ = b           | 7  (A) |     | v‚ÇÅ  |     |     |     |     |                  | 61       | 40      |
| c                             |   2 | v‚ÇÇ = c           | 5  (S) |     |     | v‚ÇÇ  |     |     |     |                  | 61 (CC)  | *       |
| d                             |   3 | v‚ÇÉ = d           | 7  (S) |     |     |     | v‚ÇÉ  |     |     |                  | 61 (CC)  | *       |
|-------------------------------+-----+------------------+--------+-----+-----+-----+-----+-----+-----+------------------+----------+---------|
| a + c                         |   4 | v‚ÇÑ = v‚ÇÄ + v‚ÇÇ     | 9  (M) |     |     |     |     | v‚ÇÑ  |     | t‚ÇÄ = x‚ÇÇ + z‚ÇÇ     | 62 (CC)  | 41 (C)  |
| a - c                         |   5 | v‚ÇÖ = v‚ÇÄ - v‚ÇÇ     | 11 (M) | v‚ÇÖ  |     |     |     |     |     | x‚ÇÇ -= z‚ÇÇ         | 62 (CC)  | 41 (C)  |
| b + d                         |   6 | v‚ÇÜ = v‚ÇÅ + v‚ÇÉ     | 10 (M) |     |     |     |     |     | v‚ÇÜ  | t‚ÇÅ = x‚ÇÉ + z‚ÇÉ     | 62 (CC)  | 41 (C)  |
| b - d                         |   7 | v‚Çá = v‚ÇÅ - v‚ÇÉ     | 8  (M) |     | v‚Çá  |     |     |     |     | x‚ÇÉ -= z‚ÇÉ         | 62 (CC)  | 41 (C)  |
| (a + c)(b - d)                |   8 | v‚Çà = v‚ÇÑ * v‚Çá     | 13 (A) |     |     |     | v‚Çà  |     |     | z‚ÇÉ = x‚ÇÉ * t‚ÇÄ     | 61       | 61      |
| (a + c)¬≤                      |   9 | v‚Çâ = v‚ÇÑ¬≤         | 18 (M) |     |     | v‚Çâ  |     |     |     | z‚ÇÇ = t‚ÇÄ¬≤         | 61 (CC)  | 61 (CC) |
| (a - c)(b + d)                |  10 | v‚ÇÅ‚ÇÄ = v‚ÇÖ * v‚ÇÜ    | 13 (S) |     | v‚ÇÅ‚ÇÄ |     |     |     |     | x‚ÇÉ = x‚ÇÇ * t‚ÇÅ     | 61 (CC)  | 61 (CC) |
| (a - c)¬≤                      |  11 | v‚ÇÅ‚ÇÅ = v‚ÇÖ¬≤        | 16 (M) |     |     |     |     |     | v‚ÇÅ‚ÇÅ | t‚ÇÅ = x‚ÇÇ¬≤         | 61 (CC)  | 61 (CC) |
|-------------------------------+-----+------------------+--------+-----+-----+-----+-----+-----+-----+------------------+----------+---------|
| 2(ab - cd)                    |  12 | v‚ÇÅ‚ÇÇ = v‚Çà + v‚ÇÅ‚ÇÄ   | 21 (M) |     |     |     |     | v‚ÇÅ‚ÇÇ |     | t‚ÇÄ = z‚ÇÉ + x‚ÇÉ     | 62 (CC)  | 62 (CC) |
| 2(bc - ad)                    |  13 | v‚ÇÅ‚ÇÉ = v‚Çà - v‚ÇÅ‚ÇÄ   | 14 (M) |     |     |     | v‚ÇÅ‚ÇÉ |     |     | z‚ÇÉ -= x‚ÇÉ         | 62 (CC)  | 62 (CC) |
| 4(bc - ad)¬≤                   |  14 | v‚ÇÅ‚ÇÑ = v‚ÇÅ‚ÇÉ¬≤       | 20 (M) |     | v‚ÇÅ‚ÇÑ |     |     |     |     | x‚ÇÉ = z‚ÇÉ¬≤         | 61 (CC)  | 61 (CC) |
| (a¬≤ - c¬≤)¬≤           = X‚ÇÇ·µ¢    |  15 | v‚ÇÅ‚ÇÖ = v‚Çâ * v‚ÇÅ‚ÇÅ   | ‚àû  (A) | v‚ÇÅ‚ÇÖ |     |     |     |     |     | x‚ÇÇ = z‚ÇÇ * t‚ÇÅ     | 61       | 61 (C)  |
| 4ac                           |  16 | v‚ÇÅ‚ÇÜ = v‚Çâ - v‚ÇÅ‚ÇÅ   | 19 (M) |     |     |     | v‚ÇÅ‚ÇÜ |     |     | z‚ÇÉ = z‚ÇÇ - t‚ÇÅ     | 27 (C)   | 27 (C)  |
| 486660 ac = (A - 2)a c        |  17 | v‚ÇÅ‚Çá = 121665 v‚ÇÅ‚ÇÜ | 18 (A) |     |     |     |     |     | v‚ÇÅ‚Çá | t‚ÇÅ = 121665 * z‚ÇÉ | 44       | 44      |
| a¬≤ + A ac + c¬≤                |  18 | v‚ÇÅ‚Çà = v‚Çâ + v‚ÇÅ‚Çá   | 19 (M) |     |     |     |     |     | v‚ÇÅ‚Çà | t‚ÇÅ += z‚ÇÇ         | 45 (C)   | 45 (C)  |
| 4ac (a¬≤ + A ac + c¬≤) = Z‚ÇÇ·µ¢    |  19 | v‚ÇÅ‚Çâ = v‚ÇÅ‚ÇÜ * v‚ÇÅ‚Çà  | ‚àû  (A) |     |     | v‚ÇÅ‚Çâ |     |     |     | z‚ÇÇ = t‚ÇÅ * z‚ÇÉ     | 61       | 61 (CC) |
| 4 X(bc - ad)¬≤        = 4Z‚ÇÇ·µ¢‚Çä‚ÇÅ |  20 | v‚ÇÇ‚ÇÄ = v‚ÇÅ‚ÇÑ * X(B) | ‚àû  (A) |     |     |     | v‚ÇÇ‚ÇÄ |     |     | z‚ÇÉ = x‚ÇÉ * X(B)   | 61       | 61 (CC) |
| 4 (ab - cd)¬≤         = 4X‚ÇÇ·µ¢‚Çä‚ÇÅ |  21 | v‚ÇÇ‚ÇÅ = v‚ÇÅ‚ÇÇ¬≤       | ‚àû  (A) |     | v‚ÇÇ‚ÇÅ |     |     |     |     | x‚ÇÉ = t‚ÇÄ¬≤         | 61       | 61 (C)  |
|-------------------------------+-----+------------------+--------+-----+-----+-----+-----+-----+-----+------------------+----------+---------|


*** Carry propagation rules.

The need column says till what instruction is the value
need. Additionally it also depends on whether the value is needed as
multiplicative, additive or a negative operand; in A = B - C, C is the
negative operand. We need to get all multiplicative and negative
operand to standard form and therefore enough carry propagation is to
be done.
